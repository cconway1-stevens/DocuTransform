{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Question 4\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Industrial engineers periodically conduct \u8220"work measurement\u8221" analyses to determine the time required to produce a single unit of output. At a large processing plant, the number of total worker-hours required per day to perform a certain task was recorded for 50 days. The data are shown below:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 128 119 95 97 124 128 142 98 108 120 113 109 124 132 97 138 133 136 120 112 146 128 103 135 114 109 100 111 131 113 124 131 133 131 88 118 116 98 112 138 100 112 11 150 117 122 97 116 92 122\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Part (a)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Compute the mean, median, and the mode of the data set.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 ```python \{\u8220"id\u8221":\u8220"01HXDFT2E7Z154D74YSEXHG4F1\u8221"\} # (a) Compute mean, median mean = np.mean(data) median = np.median(data)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Find mode\par}
{\pard \ql \f0 \sa180 \li0 \fi0 unique_values, counts = np.unique(data, return_counts=True) max_count = np.max(counts) modes = unique_values[counts == max_count]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
### Results\line
\line
```python \{"id":"01HXDFPREAR7VQMYBBWGP80GYM"\}\line
Mean: 115.82\line
Median: 117.5\line
Mode: [97, 112, 124, 128, 131] (each mode appears 3 times)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Part (b)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Find the range, variance, and standard deviation of the data set.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 python \{"id":"01HXDFVVTC2GQC7CGFAXSTGHHV"\} # (b) Calculate range, variance, and standard deviation data_range = np.ptp(data) variance = np.var(data, ddof=1) std_dev = np.sqrt(variance)}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Results\par}
{\pard \ql \f0 \sa180 \li0 \fi0 ```python \{\u8220"id\u8221":\u8220"01HXDFPREAR7VQMYBBWHEDM4JZ\u8221"\} range_data = 139 variance = 453.17 standard_deviation = 21.29\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Results: Range: 139 Variance: 453.17 Standard Deviation: 21.29\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
## Part (c)\line
\line
Construct the intervals \u177 ? s, \u177 ? 2s, and \u177 ? 3s. Count the number of observations that fall within each interval and find the corresponding proportions. Do you detect any outliers?\line
\line
### Code\line
\line
```python \{"id":"01HXDFX5G22BSDMQKHCB9PB3RE"\}\line
# (c) Construct the intervals \u177 ?s, \u177 ?2s, \u177 ?3s\line
mean_std = mean + np.array([-1, 1]) * std_dev\line
mean_2std = mean + np.array([-2, 2]) * std_dev\line
mean_3std = mean + np.array([-3, 3]) * std_dev\line
\line
# Count the number of observations in each interval\line
count_s = np.sum((data >= mean_std[0]) & (data <= mean_std[1]))\line
count_2s = np.sum((data >= mean_2std[0]) & (data <= mean_2std[1]))\line
count_3s = np.sum((data >= mean_3std[0]) & (data <= mean_3std[1]))\line
\line
# Proportions for each interval\line
prop_s = count_s / len(data)\line
prop_2s = count_2s / len(data)\line
prop_3s = count_3s / len(data)\line
\line
# Outliers detection based on \u177 ?3s\line
outliers = data[(data < mean_3std[0]) | (data > mean_3std[1])]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Results\par}
{\pard \ql \f0 \sa180 \li0 \fi0 ```python \{\u8220"id\u8221":\u8220"01HXDFPREAR7VQMYBBWKXK2NJJ\u8221"\} intervals = [[94.53, 137.11], [73.24, 158.40], [51.96, 179.68]] counts = [42, 49, 49] proportions = [0.84, 0.98, 0.98] outliers = [11]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Results: Intervals and counts: \u177 ?1s (42), \u177 ?2s (49), \u177 ?3s (49) Proportions: \u177 ?1s (0.84), \u177 ?2s (0.98), \u177 ?3s (0.98) Detected Outliers: [11]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
## Part (d)\line
\line
Construct a box plot for the data. Do you detect any outliers?\line
\line
### CODE\line
\line
```python \{"id":"01HXDFY8QM22RP2QAY06T5GP63"\}\line
# (d) Box plot for the data\line
plt.boxplot(data, vert=False)\line
plt.title("Boxplot of Worker-Hours")\line
plt.xlabel("Worker-Hours")\line
plt_path = os.path.join("results", "boxplot.png")\line
create_directory("results")\line
plt.savefig(plt_path)\line
plt.close()\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Results\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 python \{"id":"01HXDFPREAR7VQMYBBWMDQFF5F"\} # Placeholder for the box plot image Box plot analysis detected outliers: [11]}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\cf1 [image: ./results/boxplot.png]\cf0}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Box Plot\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Part (e)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Find the 70th percentile for the data on total daily worker-hours.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 ```python \{\u8220"id\u8221":\u8220"01HXDG1WYBWMHFBH4GJKJ6KXD7\u8221"\} # (e) 70th percentile percentile_70 = np.percentile(data, 70) percentile_interpretation = f\u8221"70% of the recorded worker-hours are less than or equal to \{percentile_70\} hours.\u8221"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
### Results \line
\line
```python \{"id":"01HXDFPREAR7VQMYBBWPFK7PEP"\}\line
percentile_70 = 128.0\line
\line
Results:\line
70th Percentile: 128.0\par}
